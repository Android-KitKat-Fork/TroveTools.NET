<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:c="clr-namespace:TroveTools.NET.Converter"
                    xmlns:vw="clr-namespace:TroveTools.NET.View"
                    xmlns:vm="clr-namespace:TroveTools.NET.ViewModel">
    
    <c:ImagePathConverter x:Key="ImagePathConverter" />
    <c:EmptyStringConverter x:Key="EmptyStringConverter" />
    <c:MultiLineStringConverter x:Key="MultiLineStringConverter" />
    <c:SortColumnToVisibilityConverter x:Key="SortColumnToVisibilityConverter" />
    <c:UnixTimeSecondsToDateTimeConverter x:Key="UnixTimeSecondsToDateTimeConverter" />
    <c:TimeSpanToUserFriendlyStringConverter x:Key="TimeSpanToUserFriendlyStringConverter" />

    <Style TargetType="{x:Type Image}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="OribitronFontControl" TargetType="{x:Type Control}">
        <Setter Property="FontFamily" Value="/Resources/#Orbitron" />
    </Style>

    <Style x:Key="OribitronFontTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="/Resources/#Orbitron" />
    </Style>

    <DataTemplate x:Key="TabItemTemplate">
        <ContentPresenter>
            <ContentPresenter.Content>
                <TextBlock Text="{Binding DisplayName}" Style="{StaticResource OribitronFontTextBlock}" />
            </ContentPresenter.Content>
        </ContentPresenter>
    </DataTemplate>

    <!-- DataTemplates to bind tab views to view models -->
    <DataTemplate DataType="{x:Type vm:MyModsViewModel}">
        <vw:MyModsView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:GetMoreModsViewModel}">
        <vw:GetMoreModsView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:SettingsViewModel}">
        <vw:SettingsView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:AboutViewModel}">
        <vw:AboutView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:TrovesaurusViewModel}">
        <vw:TrovesaurusView/>
    </DataTemplate>

    <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>

    <!-- Below are two methods for keeping the ListViewItem selected when clicking and typing inside a textbox,
         but neither kept the proper item selected after losing focus (such as trying to click on the Remove Location button) -->
    <!--
    <Style TargetType="{x:Type ListViewItem}">
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="IsSelected" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>
    -->

    <!--
    <Style TargetType="{x:Type ListViewItem}">
        <Style.Triggers>
            <EventTrigger RoutedEvent="PreviewGotKeyboardFocus">
                <BeginStoryboard>
                    <Storyboard>
                        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="(ListViewItem.IsSelected)">
                            <DiscreteBooleanKeyFrame KeyTime="0" Value="True"/>
                        </BooleanAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    -->

    <Style x:Key="ListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="Height" Value="50" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>

    <Style TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
    </Style>

    <Style x:Key="BorderlessButton" TargetType="{x:Type Button}">
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Name="border" Background="{TemplateBinding Background}">
                        <ContentPresenter Name="content" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="content" Property="RenderTransform" >
                                <Setter.Value>
                                    <ScaleTransform ScaleX="1.1" ScaleY="1.1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="content" Property="RenderTransform" >
                                <Setter.Value>
                                    <ScaleTransform ScaleX=".95" ScaleY=".95" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="SortingColumnHeaderTemplate">
        <DockPanel HorizontalAlignment="Stretch">
            <TextBlock Margin="2,0,2,0" Text="{Binding RelativeSource={RelativeSource AncestorType={x:Type GridViewColumnHeader}},Path=Tag}" />
            <Path DockPanel.Dock="Left" StrokeThickness="1" Fill="Gray" Data="M 5,10 L 15,10 L 10,5 L 5,10">
                <Path.Visibility>
                    <MultiBinding Converter="{StaticResource SortColumnToVisibilityConverter}" ConverterParameter="Ascending">
                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type GridViewColumnHeader}}" Path="CommandParameter" />
                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type UserControl}}" Path="DataContext.SortBy" />
                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type UserControl}}" Path="DataContext.SortDirection" />
                    </MultiBinding>
                </Path.Visibility>
            </Path>
            <Path DockPanel.Dock="Left" StrokeThickness="1" Fill="Gray" Data="M 5,5 L 10,10 L 15,5 L 5,5">
                <Path.Visibility>
                    <MultiBinding Converter="{StaticResource SortColumnToVisibilityConverter}" ConverterParameter="Descending">
                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type GridViewColumnHeader}}" Path="CommandParameter" />
                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type UserControl}}" Path="DataContext.SortBy" />
                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type UserControl}}" Path="DataContext.SortDirection" />
                    </MultiBinding>
                </Path.Visibility>
            </Path>
        </DockPanel>
    </DataTemplate>

</ResourceDictionary>